version: '3.9'
services:
  # Typebot Builder Service
  typebot_builder:
    image: 'baptistearno/typebot-builder:latest'
    depends_on:
      - postgres
    environment:
      - SERVICE_FQDN_MANAGER
      - DATABASE_URL=postgresql://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-postgres}?schema=typebot_scheme
      - ENCRYPTION_SECRET=${SERVICE_BASE64_SECRET}
      - DEFAULT_WORKSPACE_PLAN=UNLIMITED
      - NEXTAUTH_URL=${SERVICE_FQDN_MANAGER}
      - NEXT_PUBLIC_VIEWER_URL=${SERVICE_FQDN_CHAT}
      - NEXTAUTH_URL_INTERNAL=http://localhost:3000
      - DISABLE_SIGNUP=false
      - S3_ACCESS_KEY=${USER_MINIO}
      - S3_SECRET_KEY=${PASSWORD_MINIO}

      #SMTP
      - ADMIN_EMAIL=electroneumthiago01@gmail.com
      - NEXT_PUBLIC_SMTP_FROM='Suporte' <electroneumthiago01@gmail.com>
      - SMTP_USERNAME=electroneumthiago01@gmail.com
      - SMTP_PASSWORD=nqmkmdwftcngccvc

      - SMTP_AUTH_DISABLED=false
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=465
      - SMTP_SECURE=true

      #Google 
      - GOOGLE_CLIENT_ID=000
      - GOOGLE_CLIENT_SECRET=000
      - NEXT_PUBLIC_GOOGLE_API_KEY=000
    entrypoint: >
      sh -c 'export S3_ENDPOINT=$(echo "${URL_MINIO}" | sed "s~^https\?://~~"); exec "/app/builder-entrypoint.sh"'
    networks:
      - bot-diario

  # Typebot Viewer Service
  typebot_viewer:
    image: 'baptistearno/typebot-viewer:latest'
    depends_on:
      - postgres
    environment:
      - SERVICE_FQDN_CHAT
      - DATABASE_URL=postgresql://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-postgres}?schema=typebot_scheme
      - ENCRYPTION_SECRET=${SERVICE_BASE64_SECRET}
      - DEFAULT_WORKSPACE_PLAN=UNLIMITED
      - NEXTAUTH_URL=${SERVICE_FQDN_CHAT}
      - NEXT_PUBLIC_VIEWER_URL=${SERVICE_FQDN_CHAT}
      - NEXTAUTH_URL_INTERNAL=http://localhost:3000
      - GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
      - GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - NEXT_PUBLIC_GOOGLE_API_KEY=$NEXT_PUBLIC_GOOGLE_API_KEY
      - S3_ACCESS_KEY=${USER_MINIO}
      - S3_SECRET_KEY=${PASSWORD_MINIO}
    entrypoint: >
      sh -c 'export S3_ENDPOINT=$(echo "${URL_MINIO}" | sed "s~^https\?://~~"); exec "/app/viewer-entrypoint.sh"'
    networks:
      - bot-diario

  # Evolution API Service
  evolution-api:
    container_name: evolution_api
    image: atendai/evolution-api:v2.1.1
    restart: always
    ports:
      - "8082:8080"
    volumes:
      - evolution_instances:/evolution/instances
    environment:
      - SERVICE_FQDN_EVO_8080
      - SERVER_URL=${URL_EVOLUTION_API}
      - DATABASE_URL=postgresql://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-postgres}?schema=evolution_api
      - DATABASE_CONNECTION_URI=postgresql://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-postgres}?schema=evolution_api
      - DATABASE_PROVIDER=postgresql
      - DATABASE_SAVE_DATA_INSTANCE=true
      - DATABASE_SAVE_DATA_NEW_MESSAGE=true
      - DATABASE_SAVE_MESSAGE_UPDATE=true
      - DATABASE_SAVE_DATA_CONTACTS=true
      - DATABASE_SAVE_DATA_CHATS=true
      - DATABASE_SAVE_DATA_LABELS=true
      - DATABASE_SAVE_DATA_HISTORIC=true
      - CONFIG_SESSION_PHONE_CLIENT=typebot-sed
      - CONFIG_SESSION_PHONE_NAME=Chrome
      - AUTHENTICATION_API_KEY=${SERVICE_BASE64_128_EVOLUTION}
      - CACHE_REDIS_ENABLED=true
      - CACHE_REDIS_URI=redis://redis:6379/6
      - CACHE_REDIS_PREFIX_KEY=evolutionv2
      - CACHE_REDIS_SAVE_INSTANCES=false
      - CACHE_LOCAL_ENABLED=false
    depends_on:
      - postgres
      - redis
    networks:
      - bot-diario

  redis:
    image: 'redis:latest'
    command: "redis-server --port 6379 --appendonly yes\n"
    restart: always
    volumes:
      - 'evolution_redis:/data'
    ports:
      - "6379:6379"
    networks:
      - bot-diario

  # Postgres Service
  postgres:
    container_name: postgres
    image: postgres:16
    command: ["postgres", "-c", "max_connections=1000", "-c", "listen_addresses=*"]
    restart: always
    ports:
      - 5432:5432
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-postgres}
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=${SERVICE_USER_POSTGRES}
      - DB_POSTGRESDB_PASSWORD=${SERVICE_PASSWORD_POSTGRES}
      - POSTGRES_USER=${SERVICE_USER_POSTGRES}
      - POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    volumes:
      - ./postgres-init-scripts:/docker-entrypoint-initdb.d/init-schemas.sql
      - postgres_data:/var/lib/postgresql/data
    expose:
      - 5432
    networks:
      - bot-diario

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        - DATABASE_URL=postgresql://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-postgres}?schema=api_scheme
    ports:
      - "3333:3333"
    environment:
      - DATABASE_URL=postgresql://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-postgres}?schema=api_scheme
      - JWT_SECRET=${SERVICE_BASE64_128_JWTSECRET}
      - JWT_EXPIRES_IN=1800
      - NODE_ENV=production
      - GEMINI_API_KEY=${SERVICE_GEMINI_API_KEY_PROD}
      - API_KEY=${SERVICE_BASE64_128_API}
      - API_HOST=${API_HOST}
      - ADMIN_API_KEY=${SERVICE_BASE64_128_ADMIN}
    depends_on:
      - postgres
    networks:
      - bot-diario

volumes:
  evolution_instances:
  evolution_redis:
  postgres_data:

networks:
  bot-diario:
    name: bot-diario
    driver: bridge
    external: true